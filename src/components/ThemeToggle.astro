---
// Theme toggle component
---

<button id="theme-toggle" aria-label="Toggle theme" title="Toggle theme">
    <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
    <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
</button>

<style>
    #theme-toggle {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-heading);
        transition: transform 0.2s ease, color 0.3s ease;
    }

    #theme-toggle:hover {
        transform: scale(1.1);
    }

    #theme-toggle svg {
        width: 24px;
        height: 24px;
    }

    /* Dark mode shows sun icon (to switch to light) */
    #sun-icon {
        display: block;
    }

    #moon-icon {
        display: none;
    }

    /* Light mode shows moon icon (to switch to dark) */
    [data-theme="light"] #sun-icon {
        display: none;
    }

    [data-theme="light"] #moon-icon {
        display: block;
    }
</style>

<script>
    // Theme toggle functionality
    const themeToggle = document.getElementById('theme-toggle');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');
    const html = document.documentElement;

    // Get system preference
    const getSystemPreference = () => {
        return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
    };

    // Get theme from localStorage or system preference
    const getTheme = () => {
        const stored = localStorage.getItem('theme');
        if (stored) return stored;
        return getSystemPreference();
    };

    // Update icons based on theme
    const updateIcons = (theme: string) => {
        if (theme === 'light') {
            sunIcon!.style.display = 'block';
            moonIcon!.style.display = 'none';
        } else {
            sunIcon!.style.display = 'none';
            moonIcon!.style.display = 'block';
        }
    };

    // Set theme
    const setTheme = (theme: string) => {
        if (theme === 'light') {
            html.setAttribute('data-theme', 'light');
        } else {
            html.removeAttribute('data-theme');
        }
        localStorage.setItem('theme', theme);
        updateIcons(theme);
    };

    // Initialize icons on load
    const currentTheme = getTheme();
    updateIcons(currentTheme);

    // Listen for system preference changes
    window.matchMedia('(prefers-color-scheme: light)').addEventListener('change', (e) => {
        // Only update if user hasn't manually set a preference
        if (!localStorage.getItem('theme')) {
            const newTheme = e.matches ? 'light' : 'dark';
            setTheme(newTheme);
        }
    });

    // Toggle theme on button click
    themeToggle?.addEventListener('click', () => {
        const currentTheme = getTheme();
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
    });
</script>
